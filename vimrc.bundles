"=============================================================================
" reference: https://github.com/wklken/k-vim
" http://lazybing.github.io/blog/2016/07/07/how-to-use-vim/

"=============================================================================
" bundle 插件管理和配置项
"=============================================================================

"=============================================================================
"包依赖
"package dependence:  ctags
"python dependence:   pep8, pyflake

"非兼容vi模式。去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限
set nocompatible

" configure Vundle
filetype off " required! turn off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
"let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

"=============================================================================
"使用Vundle来管理插件
" vim plugin bundle control, command model
"     :BundleInstall     install 安装配置的插件
"     :BundleUpdate    update  更新
"     :BundleClean       remove plugin not in list 删除本地无用插件
"=============================================================================
Plugin 'gmarik/vundle'



"=============================================================================
"多语言语法检查
"git clone https://github.com/scrooloose/syntastic.git
":help syntastic
"=============================================================================
Plugin 'scrooloose/syntastic'
let g:syntastic_error_symbol="✗"
let g:syntastic_warning_symbol="⚠"
let g:syntastic_check_on_open=1
let g:syntastic_enable_highlighting = 0
"let g:syntastic_python_checker="flake8,pyflakes,pep8,pylint"
let g:syntastic_python_checkers=['pyflakes'] " 使用pyflakes,速度比pylint快
let g:syntastic_javascript_checkers = ['jsl', 'jshint']
let g:syntastic_html_checkers=['tidy', 'jshint']
highlight SyntasticErrorSign guifg=white guibg=black

"=============================================================================
" 对 C++ 语法高亮进行增强
Plugin 'octol/vim-cpp-enhanced-highlight'


"=============================================================================
"代码自动补全
"git clone https://github.com/Valloric/YouCompleteMe.git
"=============================================================================

"""""Bundle 'Valloric/YouCompleteMe'
""""""youcompleteme  默认tab  s-tab 和自动补全冲突
""""""let g:ycm_key_list_select_completion=['<c-n>']
"""""let g:ycm_key_list_select_completion = ['<Down>']
""""""let g:ycm_key_list_previous_completion=['<c-p>']
"""""let g:ycm_key_list_previous_completion = ['<Up>']
"""""let g:ycm_complete_in_comments = 1  "在注释输入中也能补全
"""""let g:ycm_complete_in_strings = 1   "在字符串输入中也能补全
"""""let g:ycm_use_ultisnips_completer = 1 "提示UltiSnips
"""""let g:ycm_collect_identifiers_from_comments_and_strings = 1   "注释和字符串中的文字也会被收入补全
"""""let g:ycm_collect_identifiers_from_tags_files = 1
"""""let g:ycm_key_detailed_diagnostics = '<leader>d'
""""""let g:ycm_collect_identifiers_from_tag_files = 1              "使用ctags生成的tags文件
"""""
"""""" 跳转到定义处, 分屏打开
"""""let g:ycm_goto_buffer_command = 'horizontal-split'
"""""nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
""""""nnoremap <leader>jd: YcmCompleter GoToDefinition<CR>
""""""nnoremap <leader>gd: YcmCompleter GoToDeclaration<CR>
"""""
""""""let g:ycm_seed_identifiers_with_syntax=1   "语言关键字补全, 不过python关键字都很短，所以，需要的自己打开
"""""" 引入，可以补全系统，以及python的第三方包 针对新老版本YCM做了兼容
"""""" old version
"""""if !empty(glob("~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py"))
"""""    let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py"
"""""endif
"""""" 直接触发自动补全 insert模式下
"""""let g:ycm_key_invoke_completion = '<C-Space>'
"""""" 黑名单,不启用
"""""let g:ycm_filetype_blacklist = {
"""""      \ 'tagbar' : 1,
"""""      \ 'gitcommit' : 1,
"""""      \}
"""""



"=============================================================================
"代码片段快速插入
"git clone https://github.com/SirVer/ultisnips.git
"git clone https://github.com/honza/vim-snippets.git
"c/c++的需要重新定义，放在.vim/UltilSnips目录下
"=============================================================================
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'

let g:UltiSnipsExpandTrigger       = "<tab>"
let g:UltiSnipsJumpForwardTrigger  = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
let g:UltiSnipsSnippetDirectories  = ['UltiSnips']
let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'
" 定义存放代码片段的文件夹 .vim/UltiSnips下，使用自定义和默认的，将会的到全局，有冲突的会提示
" 进入对应filetype的snippets进行编辑
map <leader>us :UltiSnipsEdit<CR>
function! g:UltiSnips_Complete()
    call UltiSnips#ExpandSnippet()
    if g:ulti_expand_res == 0
        if pumvisible()
            return "\<C-n>"
        else
            call UltiSnips#JumpForwards()
            if g:ulti_jump_forwards_res == 0
               return "\<TAB>"
            endif
        endif
    endif
    return ""
endfunction
au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"



"=============================================================================
" 自动补全单引号，双引号等
" git clone https://github.com/Raimondi/delimitMate.git
" help delimitMate
"=============================================================================
Plugin 'Raimondi/delimitMate'
"" for python docstring ",优化输入
au FileType python let b:delimitMate_nesting_quotes = ['"']



"=============================================================================
" 自动补全html/xml标签
" git clone https://github.com/docunext/closetag.vim.git
Plugin 'docunext/closetag.vim'
let g:closetag_html_style=1



"=============================================================================
" 快速注释
" git clone https://github.com/scrooloose/nerdcommenter.git
" help nerdcommenter
" ,ca # 在可选的注释之间切换，比如c/c++的块注释/* */和行注释 //
" ,cc # 注释当前行
" ,cu # 取消注释
" ,cs # Comments out the selected lines with a pretty block formatted layout.
" ,cA # 在行的末尾添加注释，并进入编辑模式
Plugin 'scrooloose/nerdcommenter'
let g:NERDSpaceDelims=1


"=============================================================================
" 快速加入修改环绕字符
" git clone https://github.com/tpope/vim-surround.git
" git clone https://github.com/tpope/vim-repeat.git
" :help surround
" ds # delete surrounds
" cs # change surrounds
" ys # you surrond
" cs[" # change surroundings is cs, 有两个参数，第一个参数[为匹配参数，第二个为"替换参数
" ds[ # delete surroudnings is ds,有一个参数，即为要删除的环绕字符[
" ysiw[ :your surroundings inner word, 某个单词加上环绕字符[
" yss[: your surroundings sentence, 整个句子加上环绕字符[]
" ys$" :当前到行尾, 引号引住
" w, W, and s correspond to a |word|, a |WORD|, and a |sentence|

Plugin 'tpope/vim-surround'
" for repeat -> enhance surround.vim, . to repeat command
Plugin 'tpope/vim-repeat'


"=============================================================================
" 快速去行尾空格 [, + <Space>]
" git clone https://github.com/bronson/vim-trailing-whitespace.git
"
Plugin 'bronson/vim-trailing-whitespace'
map <leader><space> :FixWhitespace<cr>


"=============================================================================
" 快速赋值语句对齐
" git clone https://github.com/junegunn/vim-easy-align.git
" 可以选中多行,不选中默认操作当前行
" ,a= 对齐等号表达
" ,a: 对齐冒号表达式(json/map等)
" ,a<space>  首个空格对齐
" ,a2<space> 第二个空格对齐
" ,a*<space> 所有空格依次对齐
Plugin 'junegunn/vim-easy-align'
vmap <Leader>a <Plug>(EasyAlign)
nmap <Leader>a <Plug>(EasyAlign)
if !exists('g:easy_align_delimiters')
  let g:easy_align_delimiters = {}
endif
let g:easy_align_delimiters['#'] = { 'pattern': '#', 'ignore_groups': ['String'] }


"=============================================================================
"更高效的移动 [,, + w/fx]
" git clone https://github.com/Lokaltog/vim-easymotion.git
" https://github.com/Lokaltog/vim-easymotion/blob/master/README.md
" ,, + w  跳转
" ,, + fe  查找'e',快速跳转定位到某个字符位置
" ,,j      快速决定移动到下面哪行(比用行号/j移动快)
" ,,k      快速移动到上面哪行
" ,,l      本行, 向后快速移动
" ,,h      本行, 向前快速移动
" ,,s  # 搜索单个字符
" 可以有更多的学习

Plugin 'Lokaltog/vim-easymotion'
let g:EasyMotion_smartcase = 1
" let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
map <Leader><leader>h <Plug>(easymotion-linebackward)
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
map <Leader><leader>l <Plug>(easymotion-lineforward)
nmap <Leader><Leader>s <Plug>(easymotion-sn)
nmap <Leader><Leader>t <Plug>(easymotion-tn)


"=============================================================================
" 符号匹配跳转
" git clone https://github.com/vim-scripts/matchit.zip.git
Plugin 'vim-scripts/matchit.zip'
let b:match_words='\<begin\>:\<end\>'


"=============================================================================
" 显示marks - 方便自己进行标记和跳转
" git clone https://github.com/kshenoy/vim-signature.git
" m[a-zA-Z] add mark
" '[a-zA-Z] go to mark
" m<Space>  del all marks
" m/        show all marks
" dm[a-zA-z] delete one mark
" m<Space>     Delete all marks from the current buffer
" ]`           Jump to next mark
" [`           Jump to prev mark
" ]'           Jump to start of next line containing a mark
" ['           Jump to start of prev line containing a mark
" m/           Open location list and display marks from current buffer
Plugin 'kshenoy/vim-signature'


"=============================================================================
" 区块伸缩
" git clone https://github.com/terryma/vim-expand-region.git
" + 增加选中范围(+/=按键)
" _ 减少选中范围(_/-按键)
Bundle 'terryma/vim-expand-region'
map + <Plug>(expand_region_expand)
map _ <Plug>(expand_region_shrink)


"=============================================================================
" 多光标选中编辑
" git clone https://github.com/terryma/vim-multiple-cursors.git
" ctrl + m 开始选择
" ctrl + p 向上取消
" ctrl + x 跳过
" esc   退出
Plugin 'terryma/vim-multiple-cursors'
let g:multi_cursor_use_default_mapping=0
" Default mapping
let g:multi_cursor_next_key='<C-m>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'
let g:multi_cursor_select_all_key='<A-n>'


"=============================================================================
"文本对象
"TODO 还不知道怎么使用呢？？？
" 支持自定义文本对象
Plugin 'kana/vim-textobj-user.git'
" 增加行文本对象: l   dal yal cil
Plugin 'kana/vim-textobj-line'
" 增加文件文本对象: e   dae yae cie
Plugin 'kana/vim-textobj-entire.git'
" 增加缩进文本对象: i   dai yai cii - 相同缩进属于同一块
Plugin 'kana/vim-textobj-indent.git'


"=============================================================================
" 文件搜索
" git clone https://github.com/kien/ctrlp.vim.git
" Ctrl + t  # 在新的tab页中打开
" <c-f> and <c-b> to cycle between modes  # 在模式之间切换
" <c-d> to switch to filename only search instead of full path  # 在”完整路径匹配“ 和 ”文件名匹配“ 之间切换
" <c-r> to switch to regexp mode # 在“字符串模式” 和 “正则表达式模式” 之间切换
" <c-t> or <c-v>, <c-x> to open the selected entry in a new tab or in a new split
" 

Plugin 'kien/ctrlp.vim'
let g:ctrlp_map = '<leader>p'
let g:ctrlp_cmd = 'CtrlP'
map <leader>f :CtrlPMRU<CR>
"set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux"
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz)$',
    \ }
"\ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
let g:ctrlp_working_path_mode=0
let g:ctrlp_match_window_bottom=1
let g:ctrlp_max_height=15
let g:ctrlp_match_window_reversed=0
let g:ctrlp_mruf_max=500
let g:ctrlp_follow_symlinks=1

" ctrlp插件1 - 不用ctag进行函数快速跳转
Plugin 'tacahiroy/ctrlp-funky'
nnoremap <Leader>fu :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
let g:ctrlp_funky_syntax_highlight = 1
let g:ctrlp_extensions = ['funky']


"=============================================================================
" git.  git操作还是习惯命令行,vim里面处理简单diff编辑操作
" TODO git这个地方需要再研究？？？
Bundle 'tpope/vim-fugitive'
":Gdiff  :Gstatus :Gvsplit
"nnoremap <leader>ge :Gdiff<CR>
" <leader>gb maps to :Gblame<CR>
"nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>gl :Glog<CR>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gp :Git push<CR>

" 同git diff,实时展示文件中修改的行
" 只是不喜欢除了行号多一列, 默认关闭,gs时打开
Bundle 'airblade/vim-gitgutter'
let g:gitgutter_map_keys = 0
let g:gitgutter_enabled = 0
let g:gitgutter_highlight_lines = 1
nnoremap <leader>gs :GitGutterToggle<CR>
nmap ]h <Plug>GitGutterNextHunk
nmap [h <Plug>GitGutterPrevHunk


"=============================================================================
" 文件时光机
" edit history, 可以查看回到某个历史状态
Plugin 'sjl/gundo.vim'
nnoremap <leader>h :GundoToggle<CR>


"=============================================================================
"显示增强
"======================================
"状态栏增强展示
" 新的airline配置
Plugin 'bling/vim-airline'
if !exists('g:airline_symbols')
let g:airline_symbols = {}
endif
let g:airline_left_sep = '▶'
let g:airline_left_alt_sep = '❯'
let g:airline_right_sep = '◀'
let g:airline_right_alt_sep = '❮'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'

"======================================
"括号显示增强
Plugin 'kien/rainbow_parentheses.vim'
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]
let g:rbpt_max = 40
let g:rbpt_loadcmd_toggle = 0
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

"======================================
"括号显示增强
" 代码缩进
" https://github.com/nathanaelkane/vim-indent-guides
"Bundle 'nathanaelkane/vim-indent-guides'
"let g:indent_guides_auto_colors = 0
"autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=3
"autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4
"hi IndentGuidesOdd  guibg=red   ctermbg=3
"hi IndentGuidesEven guibg=green ctermbg=4
"hi IndentGuidesOdd  ctermbg=black
"hi IndentGuidesEven ctermbg=darkgrey

"======================================
"显示增强-主题

"主题 solarized
Plugin 'altercation/vim-colors-solarized'
"let g:solarized_termcolors=256
let g:solarized_termtrans=1
let g:solarized_contrast="normal"
let g:solarized_visibility="normal"

"主题 molokai
Plugin 'tomasr/molokai'
"let g:molokai_original = 1

"=============================================================================
" 快速导航
" git clone https://github.com/scrooloose/nerdtree.git
" help doc:https://github.com/scrooloose/nerdtree/blob/master/doc/NERD_tree.txt
" ? # 将光标置于NERDTree窗口，按’?’可查看帮助
"======================================
Plugin 'scrooloose/nerdtree'
map <leader>n :NERDTreeToggle<CR>
let NERDTreeHighlightCursorline=1
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
"let NERDTreeDirArrows=0
"let g:netrw_home='~/bak'
"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
" s/v 分屏打开文件
let g:NERDTreeMapOpenSplit = 's'
let g:NERDTreeMapOpenVSplit = 'v'

Plugin 'jistr/vim-nerdtree-tabs'
map <Leader>n <plug>NERDTreeTabsToggle<CR>
" 关闭同步
let g:nerdtree_tabs_synchronize_view=0
let g:nerdtree_tabs_synchronize_focus=0
" 自动开启nerdtree
"let g:nerdtree_tabs_open_on_console_startup=1

"======================================
" tab/buffer导航增强
" Vim Workspace Controller
Plugin 'szw/vim-ctrlspace'
let g:ctrlspace_default_mapping_key="<leader>c"
let g:airline_exclude_preview = 1
hi CtrlSpaceSelected guifg=#586e75 guibg=#eee8d5 guisp=#839496 gui=reverse,bold ctermfg=10 ctermbg=7 cterm=reverse
hi CtrlSpaceNormal   guifg=#839496 guibg=#021B25 guisp=#839496 gui=NONE ctermfg=12 ctermbg=0 cterm=NONE
hi CtrlSpaceSearch   guifg=#cb4b16 guibg=NONE gui=bold ctermfg=9 ctermbg=NONE term=bold cterm=bold
hi CtrlSpaceStatus   guifg=#839496 guibg=#002b36 gui=reverse term=reverse cterm=reverse ctermfg=12 ctermbg=8

"======================================
"for minibufferexpl
" :help minibufexpl
" :bn   打开当前buffer的下一个buffer
" :bp   打开当前buffer的前一个buffer
" :b"num"   打开指定的buffer，"num"指的是buffer开始的那个数字，比如上图，我想打开list_audit.erb，输入:b7就ok了
" d       删除光标所在的buffer
" :bd/:MBEbd #  delete
" :bw/:MBEbw # wipeout
" :bun/:MBEbun # unload
" :ls 当前打开的buf
" :e <filename> 打开文件
" be # 在当前窗口浏览缓存
" bv # 垂直打开一个窗口浏览缓存。
" bs # 水平打开一个窗口浏览缓存

Plugin 'fholgado/minibufexpl.vim'
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1
" 解决FileExplorer窗口变小问题
let g:miniBufExplForceSyntaxEnable = 1
let g:miniBufExplorerMoreThanOne=2
let g:miniBufExplCycleArround=1
let g:miniBufExplorerAutoStart = 0

" 默认方向键左右可以切换buffer
nnoremap <TAB> :MBEbn<CR>
noremap <leader>bn :MBEbn<CR>
noremap <leader>bp :MBEbp<CR>
noremap <leader>bd :MBEbd<CR>
noremap <Leader>bt :MBEToggle <CR>

" MiniBufExpl Colors
hi MBENormal               guifg=#808080 guibg=fg
hi MBEChanged              guifg=#CD5907 guibg=fg
hi MBEVisibleNormal        guifg=#5DC2D6 guibg=fg
hi MBEVisibleChanged       guifg=#F1266F guibg=fg
hi MBEVisibleActiveNormal  guifg=#A6DB29 guibg=fg
hi MBEVisibleActiveChanged guifg=#F1266F guibg=fg


"======================================
" 标签导航
Plugin 'majutsushi/tagbar'
nmap <leader>t :TagbarToggle<CR>
let g:tagbar_autofocus = 1

" for ruby
let g:tagbar_type_ruby = {
    \ 'kinds' : [
        \ 'm:modules',
        \ 'c:classes',
        \ 'd:describes',
        \ 'C:contexts',
        \ 'f:methods',
        \ 'F:singleton methods'
    \ ]
\ }

"======================================
" go语言的tagbar配置
" 1.install gotags 'go get -u github.com/jstemmer/gotags'
" 2.make sure `gotags` in you shell PATH, you can call check it with `which gotags`
" for gotags. work with tagbar
" let g:tagbar_type_go = {
"     \ 'ctagstype' : 'go',
"     \ 'kinds'     : [
"         \ 'p:package',
"         \ 'i:imports:1',
"         \ 'c:constants',
"         \ 'v:variables',
"         \ 't:types',
"         \ 'n:interfaces',
"         \ 'w:fields',
"         \ 'e:embedded',
"         \ 'm:methods',
"         \ 'r:constructor',
"         \ 'f:functions'
"     \ ],
"     \ 'sro' : '.',
"     \ 'kind2scope' : {
"         \ 't' : 'ctype',
"         \ 'n' : 'ntype'
"     \ },
"     \ 'scope2kind' : {
"         \ 'ctype' : 't',
"         \ 'ntype' : 'n'
"     \ },
"     \ 'ctagsbin'  : 'gotags',
"     \ 'ctagsargs' : '-sort -silent'
" \ }


"=============================================================================
"语言相关

"======================================
"Python

" python fly check, 弥补syntastic只能打开和保存才检查语法的不足
Plugin 'kevinw/pyflakes-vim'
let g:pyflakes_use_quickfix = 0

" for python.vim syntax highlight
Plugin 'hdima/python-syntax'
let python_highlight_all = 1

"======================================
"Golang
" 1.install golang and install gocode 'go get github.com/nsf/gocode'
" 2.make sure gocode in your path: `which gocode` (add $GOPATH/bin to you $PATH)
"Plugin 'Blackrush/vim-gocode'
"Plugin 'fatih/vim-go.git'

"======================================
"Golang
"Markdown
"Plugin 'plasticboy/vim-markdown'
"let g:vim_markdown_folding_disabled=1

"======================================
"HTML/JS/JQUERY/CSS
" for javascript  注意: syntax这个插件要放前面
"Plugin 'jelera/vim-javascript-syntax'
"Plugin "pangloss/vim-javascript"
"let g:html_indent_inctags = "html,body,head,tbody"
"let g:html_indent_script1 = "inc"
"let g:html_indent_style1 = "inc"

" for javascript 自动补全,配合YCM,需要安装nodejs&npm  see
" https://github.com/marijnh/tern_for_vim
"Plugin 'marijnh/tern_for_vim'

"======================================
"for jquery
"Plugin 'nono/jquery.vim'

"======================================
"emmet HTML complete
"Plugin "mattn/emmet-vim"

"======================================
"###### vim.less : less 自动更新##########
"Plugin 'groenewege/vim-less'
"autocmd BufWritePost *.less :!lessc % > %:p:r.css

"======================================
"###### Jinja2 #########
"Plugin 'Glench/Vim-Jinja2-Syntax'

"for css color
"not work in iterm2 which termianl selection is not xterm-256
"Plugin 'ap/vim-css-color'

" 这个有坑, see issue https://github.com/wklken/k-vim/issues/49
"Plugin 'gorodinskiy/vim-coloresque'

"======================================
"###### nginx #########
"Plugin 'evanmiller/nginx-vim-syntax'

"======================================
" Plugin "thinca/vim-quickrun"
" nnoremap <F10> :QuickRun<cr>
